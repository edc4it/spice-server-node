openapi: 3.0.0
servers:
  - url: /api
info:
  version: "3"
  title: Recipe API
paths:
  /recipes:
    get:
      summary: Get recipes
      description: >
        By default returns a list of 10 suggested recipes unless a
        `titlePattern` is added in which case it returns a paged result of the
        search
      parameters:
        - in: query
          description: turn on date sorting
          name: sort
          schema:
            type: string
            enum:
              - datePublished
        - in: query
          description: search for a pattern in the title
          name: titlePattern
          schema:
            type: string
        - in: query
          description: The page to get when searching with a `titlePattern`
          name: page
          schema:
            type: number
      responses:
        "200":
          description: success
          headers:
            Pagination-Count:
              description: The number of pages
              schema:
                type: integer
            Pagination-Page:
              description: current requested page
              schema:
                type: integer
            Pagination-Limit:
              description: Number of items per page
              schema:
                type: integer
            Total-elements:
              description: total number of items
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeInfo"
    post:
      summary: Add a new recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRecipe"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewRecipe"
          headers:
            Location:
              description: Relative URL to the new recipe
              schema:
                type: string
                example:
                  - "api/recipes/a746687c715f5f01a188d7b9b8e76818"
            Content-Url:
              description: Relative URL to upload the image to
              schema:
                type: string
                example:
                  - "api/a746687c715f5f01a188d7b9b8e76818/image"
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      required:
                        type: array
                        items:
                          type: string
                          example: author
  "/recipes/{id}":
    get:
      summary: Get details of a single recipe
      description: |
        Returns all the details of a recipe: ingredients, description, review etc
      parameters:
        - in: path
          description: Id of the recipe to get
          name: id
          required: true
          schema:
            type: string
            example: 5160793296cc6208c8a92751
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDetails"
  "/recipes/{id}/image":
    put:
      summary: Upload the image for a recipe
      parameters:
        - in: path
          description: the id of the recipe
          name: id
          required: true
          schema:
            type: string
            example: 5160793296cc6208c8a92751
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  description: "Supported extensions: .png, .gif, .jpg, jpeg, .svg"
                  required: true
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Relative URL to the image
              schema:
                type: string
                example:
                  - "/images/a746687c715f5f01a188d7b9b8e76818.png"
        404:
          description: when there's no recipe for the id
        400:
          description: when not uploading a file
components:
  schemas:
    RecipeInfo:
      type: object
      properties:
        id:
          description: Unique id for the recipe
          type: string
          example: 5160793296cc6208c8a92751
          readOnly: true
        title:
          description: Recipe's title
          type: string
          required: true
          example: Spicy Slow-Cooker Beef Chili Recipe
        image:
          description: name of the image file (relative to /images/ [5160793296cc6208c8a92751.png](/images/5160793296cc6208c8a92751.png))
          type: string
          required: true
          example: 5160793296cc6208c8a92751.png
        difficulty:
          description: number between 0 and 5 indicating dificulty level to prepare the
            recipe
          type: number
          example: 1
        datePublished:
          description: Publication date of the recipe (ISO format)
          type: string
          example: 2014-05-01T04:33:46.812Z
          readOnly: true
        author:
          description: the name of the author
          type: string
          required: true
          example: dparesh
        cookTime:
          type: string
          description: Cooking time (ISO 8601)
          example: PT8H45M
        prepTime:
          type: string
          description: preperation time (ISO 8601)
          example: PT30M
        recipeYield:
          type: string
          description: How many servings the recipes yields
          example: "6 servings"
    RecipeDetails:
      allOf:
        - $ref: '#/components/schemas/NewRecipe'
        - type: object
          properties:
            reviews:
              type: array
              items:
                $ref: '#/components/schemas/Review'
              example:
                - rate: 4
                  name: Isaac
                  email: "Leonora_Gusikowski86@yahoo.com"
                  submitted: "2015-01-16T06:40:39.684Z"
                  text: "Wonderful and easy recipe..."
    NewRecipe:
      allOf:
        - $ref: '#/components/schemas/RecipeInfo'
        - type: object
          properties:
            approved:
              type: boolean
              description: wether the recipe has been aprovded for publication
            source:
              type: string
              description: Source of the recipe
              example: bbcfood
            description:
              type: string
              description: A short description of the recipe
              example: A classic chili recipe made easy in a slow cooker with a mixture of ground beef, onion â€¦
              required: true
            ingredients:
              type: array
              required: true
              example:
                - "3 tablespoons  vegetable oil"
                - "2 medium yellow onions , medium dice"
              items:
                type: string

    Review:
      type: object
      properties:
        rate:
          type: number
          description: number of stars for this recipe
          example: 4
        name:
          type: string
          description: The name of the person who left the review
          example: "Isaac"
        email:
          type: string
          description: Email adress of the author
          example: "Leonora_Gusikowski86@yahoo.com"
        submitted:
          type: string
          description: Submitted date (ISO 8601)
          example: "2015-01-16T06:40:39.684Z"
        country:
          type: string
          description: Country of the auhor
          example: "Venezuela"
        avatar:
          type: string
          description: link to avatar (generated by https://marak.github.io/faker.js/)
          example: https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg
        text:
          type: string
          description: The comment for the review
          example: "Wonderful and easy recipe..."

